#!/bin/bash

set -x

INSTALL_DIR=$1
PRODUCT_TYPE=$2
DATA_DIR=$3
COMMITLOG_DIR=$4
SAVED_CACHES_DIR=$5
LOGS_DIR=$6
DESKTOP_DIR=$7
FULL_UNINSTALL=$8
INSTALL_TYPE=$9
SYSTEM_INSTALL=${10}
CASSANDRA_USER=${11}
CASSANDRA_GROUP=${12}
DISTRIBUTION=${13}
DISTRIBUTION_VERSION=${14}
IS_UPGRADE=${15}
TOOLS_DIR=${16}
SUDO_SCRIPT=${17}
SUDO_COMMAND=${18}
if [ "$DS_DO_TEST" = "" ]; then
  DS_DO_TEST=${19}
fi 

# Internal variables
APPLICATIONS_DIR=
APPLICATIONS_FALLBACK_DIR=
APP_EXT=
HOME_DIR=$HOME
AGENT_USER=cassandra
AGENT_GROUP=cassandra

# Defaults
if [ "$INSTALL_DIR" = "" ]; then
  if [ -d "/usr/share/dse" ]; then
    INSTALL_DIR="/usr/share/dse"
    if [ "$IS_UPGRADE" = "" ]; then
      IS_UPGRADE="1"
    fi
  elif [ -d "/usr/share/cassandra" ]; then
    INSTALL_DIR="/usr/share/cassandra"
    if [ "$IS_UPGRADE" = "" ]; then
      IS_UPGRADE="1"
    fi
  elif [ -f "./bin/nodetool" ]; then
    INSTALL_DIR=$(pwd)
    if [ "$IS_UPGRADE" = "" ]; then
      IS_UPGRADE="1"
    fi
  elif [ -f "./nodetool" ]; then
    OLD_PWD=$(pwd)
    INSTALL_DIR=$(cd ..; pwd)
    cd "$OLD_PWD"
    if [ "$IS_UPGRADE" = "" ]; then
      IS_UPGRADE="1"
    fi
  else
    echo Unable to determine INSTALL_DIR. Please specify on the commandline
    exit 1
  fi
fi
if [ "$IS_UPGRADE" = "" ]; then
  IS_UPGRADE="0"
fi
if [ "$IS_UPGRADE" = "yes" ]; then
  IS_UPGRADE="1"
fi
if [ "$IS_UPGRADE" = "no" ]; then
  IS_UPGRADE="0"
fi
if [ "$PRODUCT_TYPE" = "" ]; then
  if [ -f /etc/init.d/dse -o -f "$INSTALL_DIR"/bin/dse ]; then
    PRODUCT_TYPE="dse"
  elif [ -f /etc/init.d/cassandra -o -f "$INSTALL_DIR"/bin/cassandra ]; then
    PRODUCT_TYPE="dsc"
  else
    PRODUCT_TYPE="dse"
  fi
fi
if [ "$DATA_DIR" = "" ]; then
  DATA_DIR="$INSTALL_DIR"/data
fi
if [ "$COMMITLOG_DIR" = "" ]; then
  COMMITLOG_DIR="$INSTALL_DIR"/commitlog
fi
if [ "$SAVED_CACHES_DIR" = "" ]; then
  SAVED_CACHES_DIR="$INSTALL_DIR"/saved_caches
fi
if [ "$LOGS_DIR" = "" ]; then
  LOGS_DIR="$INSTALL_DIR"/logs
fi
if [ "$FULL_UNINSTALL" = "" ]; then
  FULL_UNINSTALL="0"
fi
if [ "$FULL_UNINSTALL" = "yes" ]; then
  FULL_UNINSTALL="1"
fi
if [ "$FULL_UNINSTALL" = "no" ]; then
  FULL_UNINSTALL="0"
fi
if [ "$SYSTEM_INSTALL" = "" ]; then
  if [ -f /etc/init.d/dse -o -f /etc/init.d/cassandra ]; then
    SYSTEM_INSTALL="services_and_utilities"
  else
    SYSTEM_INSTALL="no_services"
  fi
fi
if [ "$SYSTEM_INSTALL" = "yes" ]; then
  SYSTEM_INSTALL="services_and_utilities"
fi
if [ "$SYSTEM_INSTALL" = "no" ]; then
  SYSTEM_INSTALL="no_services"
fi
if [ "$CASSANDRA_USER" = "" ]; then
  CASSANDRA_USER="cassandra"
fi
if [ "$CASSANDRA_GROUP" = "" ]; then
  CASSANDRA_GROUP="cassandra"
fi
if [ "$DISTRIBUTION" = "" ]; then
  if [ -d /Applications ]; then
    DISTRIBUTION="osx"
  else
    if [ -f /etc/redhat-release ]; then
      grep CentOS /etc/redhat-release
      if [ $? = 0 ]; then
        DISTRIBUTION="centos"
      else
        grep RedHat /etc/redhat-release
        if [ $? = 0 ]; then
          DISTRIBUTION="centos"
        fi
      fi
    fi
  fi
fi
if [ "$DISTRIBUTION_VERSION" = "" ]; then
  if [ "$DISTRIBUTION" = "osx" ]; then
    DISTRIBUTION_VERSION=$(sw_vers | grep 'ProductVersion:' | grep -o '[0-9]*\.[0-9]*\.[0-9]*')
  elif [ "$DISTRIBUTION" = "centos" ]; then
    DISTRIBUTION_VERSION=$(grep -o '[0-9]*\.[0-9]*' /etc/redhat-release)
  elif [ "$DISTRIBUTION" = "redhat" ]; then
    DISTRIBUTION_VERSION=$(grep -o '[0-9]*\.[0-9]*' /etc/redhat-release)
  elif [ "$DISTRIBUTION" = "debian" ]; then
echo 2
  elif [ "$DISTRIBUTION" = "suse" ]; then
echo 2
  elif [ "$DISTRIBUTION" = "fedora" ]; then
echo 2
  elif [ "$DISTRIBUTION" = "windows" ]; then
echo 2
  else
    DISTRIBUTION_VERSION="unkown"
  fi
fi
DISTRIBUTION_MAJOR_VERSION=$(echo $DISTRIBUTION_VERSION|sed -e 's/\.[0-9]*$//g')

case $PRODUCT_TYPE in
  dse)
    echo enterprise standalone
    APP_FOLDER_NAME="DataStax Enterprise"
  ;;
  dsemulti)
    echo enterprise standalone with all packages
    APP_FOLDER_NAME="DataStax Enterprise"
  ;;
  dsc)
    echo community standalone
    APP_FOLDER_NAME="DataStax Community"
  ;;
  opscenter)
    echo opscenter standalone
    APP_FOLDER_NAME="DataStax OpsCenter"
  ;;
  datastax-agent)
    echo datastax agent standalone
    APP_FOLDER_NAME="DataStax Agent"
  ;;
  devcenter)
    echo devcenter standalone
    APP_FOLDER_NAME="DataStax DevCenter"
  ;;
  *)
    echo Unknown product type $PRODUCT_TYPE
  ;;
esac

if [ "$DS_DO_TEST" = "1" ]; then
  exit 0
fi

# Some special stuff to enable unit testing
if [ "$DS_DO_TEST" != "" ]; then
  APPLICATIONS_DIR="./Applications"
  HOME_DIR="./Home"
fi

###############################
# OS X
###############################
if [ "$DISTRIBUTION" = "osx" ]; then
  echo OS X

  if [ "$APPLICATIONS_DIR" = "" ]; then
    APPLICATIONS_DIR="/Applications"
    if [ -d "$HOME_DIR/Applications/$APP_FOLDER_NAME" ]; then
      APPLICATIONS_DIR="$HOME_DIR/Applications"
    fi
    APPLICATIONS_FALLBACK_DIR="$HOME_DIR/Applications"
  fi
  APP_EXT=.app
fi

###############################
# Linux
###############################
if [ "$DISTRIBUTION" != "osx" ]; then
  echo Linux

  if [ "$APPLICATIONS_DIR" = "" ]; then
    APPLICATIONS_DIR="$HOME_DIR/Desktop"
    APPLICATIONS_FALLBACK_DIR="$HOME_DIR/Desktop"
  fi
fi

# Print config info
echo "install_dir $INSTALL_DIR"
echo "product_dir $PRODUCT_TYPE"
echo "data_dir $DATA_DIR"
echo "commitlog_dir $COMMITLOG_DIR"
echo "saved_caches_dir $SAVED_CACHES_DIR"
echo "logs_dir $LOGS_DIR"
echo "install type: $INSTALL_TYPE"
echo "system_install $SYSTEM_INSTALL"
echo "full_uninstall $FULL_UNINSTALL"
echo "user $CASSANDRA_USER"
echo "group $CASSANDRA_GROUP"
echo "dist $DISTRIBUTION"
echo "dist_version $DISTRIBUTION_VERSION"
echo "dist_major_version $DISTRIBUTION_MAJOR_VERSION"
echo "is_upgrade $IS_UPGRADE"
echo "sudo $SUDO_COMMAND"
echo "sudo script $SUDO_SCRIPT"
echo "applications dir $APPLICATIONS_DIR"
echo "applications fallback dir $APPLICATIONS_FALLBACK_DIR"
echo "application extension: $APP_EXT"
echo "agent user: $AGENT_USER"
echo "agent group: $AGENT_GROUP"
echo "desktop dir: $DESKTOP_DIR"

#!/bin/sh

echo Running server sudo post uninstall actions
echo Arguments: "$*"
echo
env

###############################
# Linux
###############################
if [ "$DISTRIBUTION" != "osx" ]; then
  echo Linux

  # Remove system tuning files
  if [ -f /etc/sysctl.d/cassandra-sysctl.conf ]; then
    echo rm -f /etc/sysctl.d/cassandra-sysctl.conf
    rm -f /etc/sysctl.d/cassandra-sysctl.conf
  fi
  if [ -f /etc/security/limits.d/cassandra-limits.conf ]; then
    echo rm -f /etc/security/limits.d/cassandra-limits.conf
    rm -f /etc/security/limits.d/cassandra-limits.conf
  fi

  if [ -d /run/dse ]; then
    echo rm -r /run/dse
    rm -r /run/dse
  fi
  if [ -h /etc/init.d/dse -o -e /etc/init.d/dse ]; then
    echo rm -f /etc/init.d/dse
    rm -f /etc/init.d/dse
  fi
  if [ -h /etc/default/dse -o -e /etc/default/dse ]; then
    echo rm -f /etc/default/dse
    rm -f /etc/default/dse
  fi
  if [ -f /etc/dse ]; then
    echo rm -f /etc/dse
    rm -f /etc/dse
  fi
  if [ -h /usr/bin/dsetool ]; then
    echo rm -f /usr/bin/dsetool
    rm -f /usr/bin/dsetool
  fi
  if [ -h /usr/bin/make-dse-demos.sh ]; then
    echo rm -f /usr/bin/make-dse-demos.sh
    rm -f /usr/bin/make-dse-demos.sh
  fi
  if [ -h /etc/init.d/cassandra -o -e /etc/init.d/cassandra ]; then
    echo rm -f /etc/init.d/cassandra
    rm -f /etc/init.d/cassandra
  fi
  if [ -h /etc/default/cassandra -o -e /etc/default/cassandra ]; then
    echo rm -f /etc/default/cassandra
    rm -f /etc/default/cassandra
  fi
  if [ -h /usr/bin/nodetool ]; then
    echo rm -f /usr/bin/nodetool
    rm -f /usr/bin/nodetool
  fi
  if [ -h /usr/bin/cqlsh ]; then
    echo rm -f /usr/bin/cqlsh
    rm -f /usr/bin/cqlsh
  fi
  if [ -h /usr/bin/debug-cql ]; then
    echo rm -f /usr/bin/debug-cql
    rm -f /usr/bin/debug-cql
  fi
  if [ -h /usr/bin/json2sstable ]; then
    echo rm -f /usr/bin/json2sstable
    rm -f /usr/bin/json2sstable
  fi
  if [ -h /usr/bin/sstable2json ]; then
    echo rm -f /usr/bin/sstable2json
    rm -f /usr/bin/sstable2json
  fi
  if [ -h /usr/bin/sstablekeys ]; then
    echo rm -f /usr/bin/sstablekeys
    rm -f /usr/bin/sstablekeys
  fi
  if [ -h /usr/bin/sstableloader ]; then
    echo rm -f /usr/bin/sstableloader
    rm -f /usr/bin/sstableloader
  fi
  if [ -h /usr/bin/sstablescrub ]; then
    echo rm -f /usr/bin/sstablescrub
    rm -f /usr/bin/sstablescrub
  fi
  if [ -h /usr/bin/sstablesplit ]; then
    echo rm -f /usr/bin/sstablesplit
    rm -f /usr/bin/sstablesplit
  fi
  if [ -h /usr/bin/sstableupgrade ]; then
    echo rm -f /usr/bin/sstableupgrade
    rm -f /usr/bin/sstableupgrade
  fi
  if [ -h /usr/bin/cassandra-stress ]; then
    echo rm -f /usr/bin/cassandra-stress
    rm -f /usr/bin/cassandra-stress
  fi
  if [ -h /usr/bin/cassandra-stressd ]; then
    echo rm -f /usr/bin/cassandra-stressd
    rm -f /usr/bin/cassandra-stressd
  fi
  if [ -h /usr/bin/sstablelevelreset ]; then
    echo rm -f /usr/bin/sstablelevelreset
    rm -f /usr/bin/sstablelevelreset
  fi
  if [ -h /usr/bin/sstablemetadata ]; then
    echo rm -f /usr/bin/sstablemetadata
    rm -f /usr/bin/sstablemetadata
  fi
fi

if [ "$FULL_UNINSTALL" = "1" ]; then
  echo Removing all data
  if [ -d /etc/dse ]; then
    echo rm -rf /etc/dse
    rm -rf /etc/dse
  fi
  if [ -d /etc/cassandra ]; then
    echo rm -rf /etc/cassandra
    rm -rf /etc/cassandra
  fi
  if [ -d "$DATA_DIR" ]; then
    echo rm -rf "$DATA_DIR"
    rm -rf "$DATA_DIR"
  fi
  if [ -d "$COMMITLOG_DIR" ]; then
    echo rm -rf "$COMMITLOG_DIR"
    rm -rf "$COMMITLOG_DIR"
  fi
  if [ -d "$SAVED_CACHES_DIR" ]; then
    echo rm -rf "$SAVED_CACHES_DIR"
    rm -rf "$SAVED_CACHES_DIR"
  fi
  if [ -d /var/lib/cassandra ]; then
    # Only delete /var/lib/cassandra if it's empty
    echo rmdir /var/lib/cassandra
    rmdir /var/lib/cassandra
  fi
  if [ -d /var/log/spark ]; then
    echo rm -rf /var/log/spark
    rm -rf /var/log/spark
  fi
  if [ -d /var/lib/spark ]; then
    echo rm -rf /var/lib/spark
    rm -rf /var/lib/spark
  fi
  if [ -d "$LOGS_DIR"/cassandra ]; then
    echo rm -rf "$LOGS_DIR"/cassandra
    rm -rf "$LOGS_DIR"/cassandra
  fi
  if [ -d "$LOGS_DIR"/hadoop ]; then
    echo rm -rf "$LOGS_DIR"/hadoop
    rm -rf "$LOGS_DIR"/hadoop
  fi
  if [ -d "$LOGS_DIR"/hive ]; then
    echo rm -rf "$LOGS_DIR"/hive
    rm -rf "$LOGS_DIR"/hive
  fi
  if [ -d "$LOGS_DIR"/pig ]; then
    echo rm -rf "$LOGS_DIR"/pig
    rm -rf "$LOGS_DIR"/pig
  fi
  if [ -d "$LOGS_DIR"/tomcat ]; then
    echo rm -rf "$LOGS_DIR"/tomcat
    rm -rf "$LOGS_DIR"/tomcat
  fi
  if [ -d "$LOGS_DIR"/spark ]; then
    echo rm -rf "$LOGS_DIR"/spark
    rm -rf "$LOGS_DIR"/spark
  fi
  if [ -d "$LOGS_DIR"/shark ]; then
    echo rm -rf "$LOGS_DIR"/shark
    rm -rf "$LOGS_DIR"/shark
  fi
  if [ "$LOGS_DIR" != "" -a -d "$LOGS_DIR" -a ! -d "$LOGS_DIR"/opscenter -a ! -d "$LOGS_DIR"/datastax-agent -a "$LOGS_DIR" != /var/log ]; then
    echo rm -rf "$LOGS_DIR"
    rm -rf "$LOGS_DIR"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/byoh/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/byoh/conf"
    rm -rf "$INSTALL_DIR/resources/byoh/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/cassandra/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/cassandra/conf"
    rm -rf "$INSTALL_DIR/resources/cassandra/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/dse/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/dse/conf"
    rm -rf "$INSTALL_DIR/resources/dse/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/hadoop/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/hadoop/conf"
    rm -rf "$INSTALL_DIR/resources/hadoop/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/hive/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/hive/conf"
    rm -rf "$INSTALL_DIR/resources/hive/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/mahout/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/mahout/conf"
    rm -rf "$INSTALL_DIR/resources/mahout/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/pig/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/pig/conf"
    rm -rf "$INSTALL_DIR/resources/pig/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/shark/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/shark/conf"
    rm -rf "$INSTALL_DIR/resources/shark/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/solr/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/solr/conf"
    rm -rf "$INSTALL_DIR/resources/solr/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/spark/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/spark/conf"
    rm -rf "$INSTALL_DIR/resources/spark/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/sqoop/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/sqoop/conf"
    rm -rf "$INSTALL_DIR/resources/sqoop/conf"
  fi
  if [ "$INSTALL_DIR" != "" -a -d "$INSTALL_DIR/resources/tomcat/conf" ]; then
    echo rm -rf "$INSTALL_DIR/resources/tomcat/conf"
    rm -rf "$INSTALL_DIR/resources/tomcat/conf"
  fi
fi

echo Running server sudo post uninstall actions DONE

exit 0

