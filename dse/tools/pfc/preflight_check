#!/usr/bin/env python

import logging
import traceback

from checks import *
from optparse import OptionParser

class PreFlightCheck:

    def read_options(self):
        parser = OptionParser()
        parser.add_option('-f', '--fix', action='store_true', help='attempt to fix issues')
        parser.add_option('--yaml', dest='yaml_location', help='location of cassandra.yaml')

        parser.add_option('--devices', help='csv list of Cassandra drives in format: /dev/sda,/dev/sdb,...')
        parser.add_option('--disk-duration', dest='disk_duration', type='int', help='time (in seconds) for each test disk benchmark')
        parser.add_option('--disk-threads', dest='disk_threads', type='int', help='number of threads for each disk benchmark')

        parser.add_option('--ssd', help='csv list of ssd drives in format: /dev/sda,/dev/sdb,...')
        parser.add_option('--nossd', action='store_false', dest='ssd', help='setup does not have ssd(s)')

        (options, args) = parser.parse_args()
        return (options, args)

    def display_result(self, check_name, module_name, options):
        try:
            successful = globals()[module_name].check(options)
        except Exception, e:
            logging.error('Exception found in %s.py. %s check did not complete successfully.' % (module_name, check_name))
            logging.error('Stacktrace:')

            stacktrace = traceback.format_exc()
            for line in stacktrace.strip().split('\n'):
                print '\t%s' % line

            print
            return
        else:
            if not successful:
                logging.error('%s check did not complete successfully.' % check_name)
        print

    def __init__(self):
        FORMAT = '%(levelname)-7s %(message)s'
        logger = logging.basicConfig(level=logging.INFO, format=FORMAT)
        (options, args) = self.read_options()

        self.display_result('Blockdev', 'blockdev', options)
        self.display_result('Kernel State', 'kernel_state', options)
        self.display_result('Limits', 'limits', options)
        self.display_result('Nproc', 'nproc', options)
        self.display_result('SSD', 'ssd', options)
        self.display_result('Swap', 'swap', options)
        self.display_result('Yaml', 'yaml_check', options)
        self.display_result('Disk benchmarks', 'disk', options)

if __name__ == '__main__':
    PreFlightCheck()
